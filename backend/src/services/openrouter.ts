import axios, { AxiosResponse } from "axios";
import { config } from "@/config";

export interface OpenRouterRequest {
  model: string;
  messages: Array<{
    role: "system" | "user" | "assistant";
    content: string;
  }>;
  max_tokens?: number;
  temperature?: number;
  top_p?: number;
  top_k?: number;
  stream?: boolean;
}

export interface OpenRouterResponse {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: Array<{
    index: number;
    message: {
      role: string;
      content: string;
    };
    finish_reason: string;
  }>;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

export class OpenRouterClient {
  private apiKey: string;
  private baseUrl: string;

  constructor() {
    this.apiKey = config.openrouterApiKey!;
    this.baseUrl = config.openrouterApiUrl;
  }

  async generateContent(
    prompt: string,
    modelName: string,
    maxTokens: number = 2048,
    temperature: number = 0.7
  ): Promise<string> {
    try {
      const request: OpenRouterRequest = {
        model: modelName,
        messages: [
          {
            role: "user",
            content: prompt,
          },
        ],
        max_tokens: maxTokens,
        temperature,
        top_p: 0.95,
        stream: false,
      };

      const response: AxiosResponse<OpenRouterResponse> = await axios.post(
        this.baseUrl,
        request,
        {
          headers: {
            Authorization: `Bearer ${this.apiKey}`,
            "Content-Type": "application/json",
            "HTTP-Referer": "https://quillcraft.app",
            "X-Title": "QuillCraft Paraphrasing Tool",
          },
          timeout: 30000,
        }
      );

      if (!response.data.choices || response.data.choices.length === 0) {
        throw new Error("No content generated by OpenRouter API");
      }

      const choice = response.data.choices[0];
      if (!choice.message || !choice.message.content) {
        throw new Error("Invalid response format from OpenRouter API");
      }

      return choice.message.content.trim();
    } catch (error: any) {
      console.error(
        "OpenRouter API Error:",
        error.response?.data || error.message
      );

      if (error.response?.status === 400) {
        throw new Error(
          "Invalid request to OpenRouter API. Please check your input."
        );
      } else if (error.response?.status === 401) {
        throw new Error("Invalid OpenRouter API key");
      } else if (error.response?.status === 402) {
        throw new Error("Insufficient credits for OpenRouter API");
      } else if (error.response?.status === 429) {
        throw new Error(
          "OpenRouter API rate limit exceeded. Please try again later."
        );
      } else if (error.response?.status >= 500) {
        throw new Error("OpenRouter API server error. Please try again later.");
      }

      throw new Error(`OpenRouter API error: ${error.message}`);
    }
  }

  async getAvailableModels(): Promise<any[]> {
    try {
      const response = await axios.get("https://openrouter.ai/api/v1/models", {
        headers: {
          Authorization: `Bearer ${this.apiKey}`,
        },
      });

      return response.data.data || [];
    } catch (error: any) {
      console.error("Error fetching OpenRouter models:", error.message);
      return [];
    }
  }
}
