import axios, { AxiosResponse } from "axios";
import { config } from "@/config";

export interface GeminiRequest {
  contents: Array<{
    parts: Array<{
      text: string;
    }>;
  }>;
  generationConfig: {
    temperature: number;
    topK: number;
    topP: number;
    maxOutputTokens: number;
    stopSequences?: string[];
  };
  safetySettings: Array<{
    category: string;
    threshold: string;
  }>;
}

export interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
    finishReason: string;
    index: number;
    safetyRatings: Array<{
      category: string;
      probability: string;
    }>;
  }>;
  promptFeedback: {
    safetyRatings: Array<{
      category: string;
      probability: string;
    }>;
  };
}

export class GeminiClient {
  private apiKey: string;
  private baseUrl: string;

  constructor() {
    this.apiKey = config.geminiApiKey!;
    this.baseUrl = config.geminiApiUrl;
  }

  async generateContent(
    prompt: string,
    modelName: string,
    maxTokens: number = 2048,
    temperature: number = 0.7
  ): Promise<string> {
    try {
      const request: GeminiRequest = {
        contents: [
          {
            parts: [
              {
                text: prompt,
              },
            ],
          },
        ],
        generationConfig: {
          temperature,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: maxTokens,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
        ],
      };

      const url = `${this.baseUrl}/${modelName}:generateContent?key=${this.apiKey}`;

      const response: AxiosResponse<GeminiResponse> = await axios.post(
        url,
        request,
        {
          headers: {
            "Content-Type": "application/json",
          },
          timeout: 30000,
        }
      );

      if (!response.data.candidates || response.data.candidates.length === 0) {
        throw new Error("No content generated by Gemini API");
      }

      const candidate = response.data.candidates[0];
      if (
        !candidate.content ||
        !candidate.content.parts ||
        candidate.content.parts.length === 0
      ) {
        throw new Error("Invalid response format from Gemini API");
      }

      return candidate.content.parts[0].text;
    } catch (error: any) {
      console.error("Gemini API Error:", error.response?.data || error.message);

      if (error.response?.status === 400) {
        throw new Error(
          "Invalid request to Gemini API. Please check your input."
        );
      } else if (error.response?.status === 401) {
        throw new Error("Invalid Gemini API key");
      } else if (error.response?.status === 429) {
        throw new Error(
          "Gemini API rate limit exceeded. Please try again later."
        );
      } else if (error.response?.status >= 500) {
        throw new Error("Gemini API server error. Please try again later.");
      }

      throw new Error(`Gemini API error: ${error.message}`);
    }
  }
}
